// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defaults parameters should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:allowEmptyValue[false]default[]": Object {
          "items": Object {
            "allowEmptyValue": false,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:allowEmptyValue[true]default[]": Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:default[]": Object {
          "items": Object {
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:allowEmptyValue[false]default[]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:allowEmptyValue[true]default[]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[]": Object {
          "items": Object {
            "items": Object {
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:allowEmptyValue[false]default[]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:allowEmptyValue[true]default[]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:default[]": Object {
          "properties": Object {
            "param1": Object {
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:allowEmptyValue[false]default[]": Object {
          "allowEmptyValue": false,
          "default": "",
          "type": "string",
        },
        "primitiveString:allowEmptyValue[true]default[]": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "primitiveString:default[]": Object {
          "default": "",
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:allowEmptyValue[false]default[]": Object {
          "items": Object {
            "allowEmptyValue": false,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:allowEmptyValue[true]default[]": Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:default[]": Object {
          "items": Object {
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:allowEmptyValue[false]default[]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:allowEmptyValue[true]default[]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[]": Object {
          "items": Object {
            "items": Object {
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:allowEmptyValue[false]default[]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:allowEmptyValue[true]default[]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:default[]": Object {
          "properties": Object {
            "param1": Object {
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:allowEmptyValue[false]default[]": Object {
          "allowEmptyValue": false,
          "default": "",
          "type": "string",
        },
        "primitiveString:allowEmptyValue[true]default[]": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "primitiveString:default[]": Object {
          "default": "",
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should pass through defaults should pass a default of \`false\` 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[false]": Object {
          "items": Object {
            "default": false,
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[false]": Object {
          "items": Object {
            "items": Object {
              "default": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[false]": Object {
          "properties": Object {
            "param1": Object {
              "default": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[false]": Object {
          "default": false,
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[example default]": Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[example default]": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[example default]": Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[example default]": Object {
          "default": "example default",
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should pass through defaults with simple usages of \`$ref\` 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[example default]": Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[example default]": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[example default]": Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[example default]": Object {
          "default": "example default",
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "default": false,
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "default": false,
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "default": false,
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "default": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "default": false,
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "default": "example default",
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "default": "example default",
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "default": "example default",
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "default": "example default",
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
      "items": Object {
        "default": "example default",
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
      "items": Object {
        "items": Object {
          "default": "example default",
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
      "properties": Object {
        "param1": Object {
          "default": "example default",
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "primitiveString": Object {
            "default": "example default",
            "type": "string",
          },
        },
      },
      "default": "example default",
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`allOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`allOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`allOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`allOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "default": "example default",
          "type": "string",
        },
        Object {
          "default": "example default",
          "type": "string",
        },
      ],
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "default": "example default",
            "type": "string",
          },
          "primitiveString-2": Object {
            "default": "example default",
            "type": "string",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`anyOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`anyOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`anyOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`anyOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "default": "example default",
          "type": "string",
        },
        Object {
          "default": "example default",
          "type": "string",
        },
      ],
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "default": "example default",
            "type": "string",
          },
          "primitiveString-2": Object {
            "default": "example default",
            "type": "string",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`oneOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
      "oneOf": Array [
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`oneOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
      "oneOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`oneOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
      "oneOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`oneOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "default": "example default",
            "type": "string",
          },
          "primitiveString-2": Object {
            "default": "example default",
            "type": "string",
          },
        },
      },
      "oneOf": Array [
        Object {
          "default": "example default",
          "type": "string",
        },
        Object {
          "default": "example default",
          "type": "string",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults should not attempt to recur on \`null\` data 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "id": Object {
          "default": 12345,
          "type": "integer",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "Pet": Object {
            "example": Object {
              "name": null,
            },
            "properties": Object {
              "name": Object {
                "type": "string",
              },
            },
            "type": "object",
          },
        },
      },
      "properties": Object {
        "name": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`parameters type sorting should return with a json schema for each parameter type (body instead of formData) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "path parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "query parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "a": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
  Object {
    "label": "Cookie Params",
    "schema": Object {
      "properties": Object {
        "cookie parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "cookie",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "header parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;

exports[`parameters type sorting should return with a json schema for each parameter type (formData instead of body) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "path parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "query parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
  Object {
    "label": "Cookie Params",
    "schema": Object {
      "properties": Object {
        "cookie parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "cookie",
  },
  Object {
    "label": "Form Data",
    "schema": Object {
      "properties": Object {
        "a": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "formData",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "header parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;
